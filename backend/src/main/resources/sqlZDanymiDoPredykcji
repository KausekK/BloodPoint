
DECLARE
  -- Parametry generowania
  c_start_date      DATE   := DATE '2018-01-01';
  c_months          PLS_INTEGER := 84;      -- ile miesięcy generować
  c_user_id         PLS_INTEGER := 1;       -- kto zmieniał (historia)
  c_amp_season      NUMBER := 0.25;         -- amplituda sezonowości (25%)
  c_trend_per_year  NUMBER := 0.03;         -- trend roczny (3%)
  c_noise_sd        NUMBER := 6;            -- odchylenie standardowe szumu losowego

  -- Zmiennie robocze
  v_req_id              NUMBER;
  v_created             DATE;
  v_appr                DATE;
  v_amount              NUMBER;
  v_status_created_id   NUMBER;
  v_status_approved_id  NUMBER;

  c_pi CONSTANT NUMBER := ACOS(-1);

  -- Funkcje pomocnicze w bloku
  FUNCTION base_for_bt(p_bt VARCHAR2) RETURN NUMBER IS
  BEGIN
    CASE p_bt
      WHEN 'O+'  THEN RETURN 70;
      WHEN 'A+'  THEN RETURN 60;
      WHEN 'B+'  THEN RETURN 45;
      WHEN 'AB+' THEN RETURN 30;
      WHEN 'O-'  THEN RETURN 35;
      WHEN 'A-'  THEN RETURN 32;
      WHEN 'B-'  THEN RETURN 25;
      WHEN 'AB-' THEN RETURN 20;
      ELSE RETURN 40;
    END CASE;
  END;

  FUNCTION mult_for_prov(p_prov VARCHAR2) RETURN NUMBER IS
  BEGIN
    CASE p_prov
      WHEN 'Mazowieckie' THEN RETURN 1.30;
      WHEN 'Śląskie'     THEN RETURN 1.10;
      WHEN 'Małopolskie' THEN RETURN 1.00;
      ELSE RETURN 0.95;
    END CASE;
  END;

  FUNCTION trend_factor(p_month_idx NUMBER, p_trend_per_year NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN 1 + p_trend_per_year * (p_month_idx / 12);
  END;

  FUNCTION season_factor(p_date DATE, p_amp_season NUMBER) RETURN NUMBER IS
    v_m NUMBER := EXTRACT(MONTH FROM p_date);
  BEGIN
    RETURN 1 + p_amp_season * COS(2 * c_pi * (v_m - 1) / 12);
  END;

  FUNCTION campaign_boost RETURN NUMBER IS
  BEGIN
    IF DBMS_RANDOM.VALUE(0,1) < 0.05 THEN  -- 5% szansy
      RETURN 1.3;
    ELSE
      RETURN 1.0;
    END IF;
  END;

BEGIN
  -- Pobierz ID statusów po nazwie
  SELECT id INTO v_status_created_id
    FROM BLOODPOINT.Blood_Request_Status
   WHERE type = 'NOWA';

  SELECT id INTO v_status_approved_id
    FROM BLOODPOINT.Blood_Request_Status
   WHERE type = 'ZATWIERDZONA';

  -- Pętla po wszystkich kombinacjach typ krwi x szpital
  FOR r IN (
    SELECT bt.id AS bt_id,
           bt.blood_group || bt.rh_factor AS bt_code,
           h.id  AS hosp_id,
           h.province AS prov
    FROM BLOODPOINT.Blood_Type bt
    CROSS JOIN BLOODPOINT.Hospital h
  ) LOOP

    FOR i IN 0 .. c_months-1 LOOP
      v_created := ADD_MONTHS(c_start_date, i);

      v_amount := base_for_bt(r.bt_code)
                  * mult_for_prov(r.prov)
                  * trend_factor(i, c_trend_per_year)
                  * season_factor(v_created, c_amp_season)
                  * campaign_boost
                  + DBMS_RANDOM.NORMAL * c_noise_sd;

      v_amount := ROUND(GREATEST(0, v_amount));

      -- nowy request
      SELECT seq_blood_request.NEXTVAL INTO v_req_id FROM dual;

      INSERT INTO BLOODPOINT.Blood_Request (id, Hospital_id, Blood_Type_id, amount)
      VALUES (v_req_id, r.hosp_id, r.bt_id, v_amount);

      -- historia: utworzenie
      INSERT INTO BLOODPOINT.Blood_Request_Status_History
        (id, Blood_Request_id, changed_at, changed_by, Blood_Request_Status_id)
      VALUES
        (seq_blood_req_hist.NEXTVAL, v_req_id, v_created, c_user_id, v_status_created_id);

      -- historia: zatwierdzenie (1-5 dni później)
      v_appr := v_created + TRUNC(DBMS_RANDOM.VALUE(1,6));
      INSERT INTO BLOODPOINT.Blood_Request_Status_History
        (id, Blood_Request_id, changed_at, changed_by, Blood_Request_Status_id)
      VALUES
        (seq_blood_req_hist.NEXTVAL, v_req_id, v_appr, c_user_id, v_status_approved_id);

    END LOOP;
  END LOOP;

  COMMIT;
END;